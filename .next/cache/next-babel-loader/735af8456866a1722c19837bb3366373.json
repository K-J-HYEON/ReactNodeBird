{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga logIn\"); // const result = yield call(logInAPI, action.data);\n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logOut\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/kjh/Desktop/node-bird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","put","delay","axios","LOG_IN_FAILURE","LOG_IN_SUCCESS","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","result","LOG_OUT_FAILURE","watchLogin","LOG_IN_REQUEST","watchLogout","LOG_OUT_REQUEST","userSaga","watchLogIn","watchLogOut"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,kBAA/C;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOJ,KAAK,CAACK,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADE,CAEF;;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,cADE;AAERE,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOO,GAAP,EAAY;AACZ,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAET,cADE;AAERW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,GAAqB;AACnB,SAAOd,KAAK,CAACK,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEM,eADE;AAERZ,MAAAA,IAAI,EAAEa,MAAM,CAACb;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEQ,eADE;AAERN,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,UAAV,GAAuB;AACrB,QAAMtB,UAAU,CAACuB,cAAD,EAAiBd,KAAjB,CAAhB;AACD;;AAED,UAAUe,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACyB,eAAD,EAAkBP,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAAC4B,UAAD,CAAL,EAAmB5B,IAAI,CAAC6B,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS } from \"../reducers/user\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"saga logIn\");\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logOut\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}